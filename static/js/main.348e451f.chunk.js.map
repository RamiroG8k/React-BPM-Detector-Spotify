{"version":3,"sources":["util/index.js","App.js","reportWebVitals.js","index.js"],"names":["SpotifyWebApi","_baseUri","_accessToken","_checkParamsAndPerformRequest","requestData","options","callback","opt","cb","_extend","params","_performRequest","promiseFunction","resolve","reject","req","XMLHttpRequest","type","open","_buildUrl","url","setRequestHeader","onreadystatechange","readyState","data","responseText","JSON","parse","e","status","send","stringify","postData","window","Promise","_promiseProvider","args","Array","prototype","slice","call","arguments","target","objects","i","length","j","parameters","qs","key","hasOwnProperty","value","encodeURIComponent","substring","Constr","constructor","setAccessToken","accessToken","searchTracks","query","q","getAudioFeaturesForTrack","trackId","getToken","_baseTokenUri","App","useState","track","setTrack","result","setResult","isPlaying","setIsPlaying","audioRef","useRef","spotifyApi","then","response","token","updateProgressState","progressIndicator","document","querySelector","style","width","fill","current","paused","duration","setAttribute","currentTime","requestAnimationFrame","HandleResult","className","name","artists","Math","round","top","tempo","count","class","map","join","onSubmit","event","preventDefault","song","trim","limit","tracks","items","previewUrl","preview_url","request","responseType","onload","offlineContext","OfflineAudioContext","webkitOfflineAudioContext","decodeAudioData","buffer","source","createBufferSource","lowpass","createBiquadFilter","frequency","Q","connect","highpass","destination","start","startRendering","oncomplete","renderedBuffer","peaks","partSize","parts","max","volume","abs","position","push","sort","a","b","splice","getPeaks","getChannelData","groups","forEach","peak","index","group","some","interval","getIntervals","svg","innerHTML","rect","svgNS","createElementNS","setAttributeNS","appendChild","intA","intB","id","audioFeatures","placeholder","onClick","audio","pause","play","handlePlay","ref","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.348e451f.chunk.js","sourcesContent":["export var SpotifyWebApi = (() => {\r\n\r\n    var _baseUri = 'https://api.spotify.com/v1';\r\n    var _baseTokenUri = 'https://spotify-web-api-token.herokuapp.com';\r\n    var _accessToken = null;\r\n\r\n    var _promiseProvider = function (promiseFunction) {\r\n        return new window.Promise(promiseFunction);\r\n    };\r\n\r\n    var _checkParamsAndPerformRequest = function (requestData, options, callback) {\r\n        var opt = {};\r\n        var cb = null;\r\n\r\n        if (typeof options === 'object') {\r\n            opt = options;\r\n            cb = callback;\r\n        } else if (typeof options === 'function') {\r\n            cb = options;\r\n        }\r\n        _extend(requestData.params, opt);\r\n        return _performRequest(requestData, cb);\r\n    };\r\n\r\n    var _performRequest = function (requestData, callback) {\r\n        var promiseFunction = function (resolve, reject) {\r\n            var req = new XMLHttpRequest();\r\n            var type = requestData.type || 'GET';\r\n            if (type === 'GET') {\r\n                req.open(type,\r\n                    _buildUrl(requestData.url, requestData.params),\r\n                    true);\r\n            } else {\r\n                req.open(type, _buildUrl(requestData.url));\r\n            }\r\n            if (_accessToken) {\r\n                req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\r\n            }\r\n            req.onreadystatechange = function () {\r\n                if (req.readyState === 4) {\r\n                    var data = null;\r\n                    try {\r\n                        data = req.responseText ? JSON.parse(req.responseText) : '';\r\n                    } catch (e) { }\r\n\r\n                    if (req.status === 200 || req.status === 201) {\r\n                        if (resolve) {\r\n                            resolve(data);\r\n                        }\r\n                        if (callback) {\r\n                            callback(null, data);\r\n                        }\r\n                    } else {\r\n                        if (reject) {\r\n                            reject(req);\r\n                        }\r\n                        if (callback) {\r\n                            callback(req, null);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (type === 'GET') {\r\n                req.send(null);\r\n            } else {\r\n                req.send(JSON.stringify(requestData.postData));\r\n            }\r\n        };\r\n\r\n        if (callback) {\r\n            promiseFunction();\r\n            return null;\r\n        } else {\r\n            return _promiseProvider(promiseFunction);\r\n        }\r\n    };\r\n\r\n    var _extend = function () {\r\n        var args = Array.prototype.slice.call(arguments);\r\n        var target = args[0];\r\n        var objects = args.slice(1);\r\n        target = target || {};\r\n        for (var i = 0; i < objects.length; i++) {\r\n            for (var j in objects[i]) {\r\n                target[j] = objects[i][j];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n\r\n    var _buildUrl = function (url, parameters) {\r\n        var qs = '';\r\n        for (var key in parameters) {\r\n            if (parameters.hasOwnProperty(key)) {\r\n                var value = parameters[key];\r\n                qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\r\n            }\r\n        }\r\n        if (qs.length > 0) {\r\n            qs = qs.substring(0, qs.length - 1); //chop off last '&'\r\n            url = url + '?' + qs;\r\n        }\r\n        return url;\r\n    };\r\n\r\n    var Constr = function () { };\r\n\r\n    Constr.prototype = {\r\n        constructor: SpotifyWebApi\r\n    };\r\n\r\n    /**\r\n     * Sets the access token to be used.\r\n     * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\r\n     * the Spotify Developer site for more information about obtaining an access token.\r\n     * @param {string} accessToken The access token\r\n     * @return {void}\r\n     */\r\n    Constr.prototype.setAccessToken = function (accessToken) {\r\n        _accessToken = accessToken;\r\n    };\r\n\r\n    /**\r\n     * Fetches tracks from the Spotify catalog according to a query.\r\n     * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\r\n     * the Spotify Developer site for more information about the endpoint.\r\n     * @param {Object} options A JSON object with options that can be passed\r\n     * @param {function(Object, Object)} callback An optional callback that receives 2 parameters. The first\r\n     * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n     * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n     */\r\n    Constr.prototype.searchTracks = function (query, options, callback) {\r\n        var requestData = {\r\n            url: _baseUri + '/search/',\r\n            params: {\r\n                q: query,\r\n                type: 'track'\r\n            }\r\n        };\r\n        return _checkParamsAndPerformRequest(requestData, options, callback);\r\n    };\r\n\r\n    /**\r\n     * Get audio features for a single track identified by its unique Spotify ID.\r\n     * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\r\n     * the Spotify Developer site for more information about the endpoint.\r\n     * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\r\n     * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\r\n     * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\r\n     * one is the error object (null if no error), and the second is the value if the request succeeded.\r\n     * @return {Object} Null if a callback is provided, a `Promise` object otherwise\r\n     */\r\n    Constr.prototype.getAudioFeaturesForTrack = function (trackId, callback) {\r\n        var requestData = {\r\n            url: _baseUri + '/audio-features/' + trackId\r\n        };\r\n        return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n    };\r\n\r\n    /**\r\n     * Obtains a token to be used against the Spotify Web API\r\n     */\r\n    Constr.prototype.getToken = function (callback) {\r\n        var requestData = {\r\n            url: _baseTokenUri + '/token'\r\n        };\r\n        return _checkParamsAndPerformRequest(requestData, {}, callback);\r\n    };\r\n\r\n    return Constr;\r\n})();\r\n\r\nexport function getPeaks(data) {\r\n\r\n    // What we're going to do here, is to divide up our audio into parts.\r\n\r\n    // We will then identify, for each part, what the loudest sample is in that\r\n    // part.\r\n\r\n    // It's implied that that sample would represent the most likely 'beat'\r\n    // within that part.\r\n\r\n    // Each part is 0.5 seconds long - or 22,050 samples.\r\n\r\n    // This will give us 60 'beats' - we will only take the loudest half of\r\n    // those.\r\n\r\n    // This will allow us to ignore breaks, and allow us to address tracks with\r\n    // a BPM below 120.\r\n\r\n    var partSize = 22050,\r\n        parts = data[0].length / partSize,\r\n        peaks = [];\r\n\r\n    for (var i = 0; i < parts; i++) {\r\n        var max = 0;\r\n        for (var j = i * partSize; j < (i + 1) * partSize; j++) {\r\n            var volume = Math.max(Math.abs(data[0][j]), Math.abs(data[1][j]));\r\n            if (!max || (volume > max.volume)) {\r\n                max = {\r\n                    position: j,\r\n                    volume: volume\r\n                };\r\n            }\r\n        }\r\n        peaks.push(max);\r\n    }\r\n\r\n    // We then sort the peaks according to volume...\r\n\r\n    peaks.sort(function (a, b) {\r\n        return b.volume - a.volume;\r\n    });\r\n\r\n    // ...take the loundest half of those...\r\n\r\n    peaks = peaks.splice(0, peaks.length * 0.5);\r\n\r\n    // ...and re-sort it back based on position.\r\n\r\n    peaks.sort(function (a, b) {\r\n        return a.position - b.position;\r\n    });\r\n\r\n    return peaks;\r\n}\r\n\r\nexport function getIntervals(peaks) {\r\n\r\n    // What we now do is get all of our peaks, and then measure the distance to\r\n    // other peaks, to create intervals.  Then based on the distance between\r\n    // those peaks (the distance of the intervals) we can calculate the BPM of\r\n    // that particular interval.\r\n\r\n    // The interval that is seen the most should have the BPM that corresponds\r\n    // to the track itself.\r\n\r\n    var groups = [];\r\n\r\n    peaks.forEach(function (peak, index) {\r\n        for (var i = 1; (index + i) < peaks.length && i < 10; i++) {\r\n            var group = {\r\n                tempo: (60 * 44100) / (peaks[index + i].position - peak.position),\r\n                count: 1\r\n            };\r\n\r\n            while (group.tempo < 90) {\r\n                group.tempo *= 2;\r\n            }\r\n\r\n            while (group.tempo > 180) {\r\n                group.tempo /= 2;\r\n            }\r\n\r\n            group.tempo = Math.round(group.tempo);\r\n\r\n            if (!(groups.some(function (interval) {\r\n                return (interval.tempo === group.tempo ? interval.count++ : 0);\r\n            }))) {\r\n                groups.push(group);\r\n            }\r\n        }\r\n    });\r\n    return groups;\r\n}","import { useState, useRef } from 'react';\r\nimport { SpotifyWebApi, getIntervals, getPeaks } from './util';\r\n\r\nconst App = () => {\r\n    const [track, setTrack] = useState('');\r\n    const [result, setResult] = useState({});\r\n\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const audioRef = useRef();\r\n    const spotifyApi = new SpotifyWebApi();\r\n\r\n    spotifyApi.getToken().then(function (response) {\r\n        spotifyApi.setAccessToken(response.token);\r\n    });\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        spotifyApi.searchTracks(event.target.song.value.trim(), { limit: 1 })\r\n            .then((response) => {\r\n                const track = response.tracks.items[0];\r\n                const previewUrl = track.preview_url;\r\n                setTrack(track.preview_url);\r\n                var request = new XMLHttpRequest();\r\n                request.open('GET', previewUrl, true);\r\n                request.responseType = 'arraybuffer';\r\n                request.onload = function () {\r\n\r\n                    // Create offline context\r\n                    var OfflineContext = window.OfflineAudioContext || window.webkitOfflineAudioContext;\r\n                    var offlineContext = new OfflineContext(2, 30 * 44100, 44100);\r\n\r\n                    offlineContext.decodeAudioData(request.response, function (buffer) {\r\n\r\n                        // Create buffer source\r\n                        var source = offlineContext.createBufferSource();\r\n                        source.buffer = buffer;\r\n\r\n                        // Beats, or kicks, generally occur around the 100 to 150 hz range.\r\n                        // Below this is often the bassline.  So let's focus just on that.\r\n\r\n                        // First a lowpass to remove most of the song.\r\n\r\n                        var lowpass = offlineContext.createBiquadFilter();\r\n                        lowpass.type = \"lowpass\";\r\n                        lowpass.frequency.value = 150;\r\n                        lowpass.Q.value = 1;\r\n\r\n                        // Run the output of the source through the low pass.\r\n\r\n                        source.connect(lowpass);\r\n\r\n                        // Now a highpass to remove the bassline.\r\n\r\n                        var highpass = offlineContext.createBiquadFilter();\r\n                        highpass.type = \"highpass\";\r\n                        highpass.frequency.value = 100;\r\n                        highpass.Q.value = 1;\r\n\r\n                        // Run the output of the lowpass through the highpass.\r\n\r\n                        lowpass.connect(highpass);\r\n\r\n                        // Run the output of the highpass through our offline context.\r\n\r\n                        highpass.connect(offlineContext.destination);\r\n\r\n                        // Start the source, and render the output into the offline conext.\r\n\r\n                        source.start(0);\r\n                        offlineContext.startRendering();\r\n                    });\r\n\r\n                    offlineContext.oncomplete = function (e) {\r\n                        var buffer = e.renderedBuffer;\r\n                        var peaks = getPeaks([buffer.getChannelData(0), buffer.getChannelData(1)]);\r\n                        var groups = getIntervals(peaks);\r\n\r\n                        var svg = document.querySelector('#svg');\r\n                        svg.innerHTML = '';\r\n                        var svgNS = 'http://www.w3.org/2000/svg';\r\n                        var rect;\r\n                        peaks.forEach(function (peak) {\r\n                            rect = document.createElementNS(svgNS, 'rect');\r\n                            rect.setAttributeNS(null, 'x', (100 * peak.position / buffer.length) + '%');\r\n                            rect.setAttributeNS(null, 'y', 0);\r\n                            rect.setAttributeNS(null, 'width', 1);\r\n                            rect.setAttributeNS(null, 'height', '100%');\r\n                            svg.appendChild(rect);\r\n                        });\r\n\r\n                        rect = document.createElementNS(svgNS, 'rect');\r\n                        rect.setAttributeNS(null, 'id', 'progress');\r\n                        rect.setAttributeNS(null, 'y', 0);\r\n                        rect.setAttributeNS(null, 'width', 1);\r\n                        rect.setAttributeNS(null, 'height', '100%');\r\n                        svg.appendChild(rect);\r\n\r\n                        // svg.innerHTML = svg.innerHTML; // force repaint in some browsers\r\n                        const top = groups.sort(function (intA, intB) {\r\n                            return intB.count - intA.count;\r\n                        }).splice(0, 5);\r\n\r\n                        spotifyApi.getAudioFeaturesForTrack(track.id)\r\n                            .then((audioFeatures) => {\r\n                                setResult({ track, top, tempo: audioFeatures.tempo });\r\n                            });\r\n                    };\r\n                };\r\n                request.send();\r\n            });\r\n\r\n    }\r\n\r\n    function updateProgressState() {\r\n        let progressIndicator = document.querySelector('#progress');\r\n        progressIndicator.style.width = '3px';\r\n        progressIndicator.style.fill = 'white';\r\n\r\n        if (audioRef.current.paused) {\r\n            return;\r\n        }\r\n        if (progressIndicator && audioRef.current.duration) {\r\n            progressIndicator.setAttribute('x', (audioRef.current.currentTime * 100 / audioRef.current.duration) + '%');\r\n        }\r\n        requestAnimationFrame(updateProgressState);\r\n    }\r\n\r\n    const HandleResult = () => {\r\n        return (\r\n            <>\r\n                <div className=\"text-lg sm:text-xl\">\r\n                    <div>Guess for track <strong>{result.track.name}</strong> by <strong>{result.track.artists[0].name}</strong> is <strong>\r\n                        {Math.round(result.top[0].tempo)} BPM</strong> with {result.top[0].count} samples.</div>\r\n\r\n                    <div class=\"small\">Other options are [\r\n                        {result.top.slice(1).map((e) => {\r\n                            return e.tempo + ' BPM (' + e.count + ')';\r\n                        }).join(', ')}]\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"small\">The tempo according to Spotify is <strong>{result.tempo} BPM</strong></div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    const handlePlay = () => {\r\n        const audio = audioRef.current;\r\n\r\n        if (isPlaying) {\r\n            setIsPlaying(false);\r\n            audio.pause();\r\n        } else {\r\n            setIsPlaying(true);\r\n            audio.play();\r\n        }\r\n\r\n        updateProgressState();\r\n    };\r\n\r\n    return (\r\n        <section className=\"p-10 sm:py-10 sm:px-36 h-screen w-screen bg-gray-700 justify-center items-center\">\r\n            <div className=\"text-center sm:my-10\">\r\n                <h1 className=\"text-4xl sm:text-5xl font-bold text-gray-400 my-3\">Finding out the BPM of a song using Javascript</h1>\r\n                <p className=\"text-lg leading-tight sm:text-2xl text-gray-900 font-semibold\">This demo uses the browser's <strong>Audio API</strong> to determine the tempo of a song, processing a chunk of\r\n                    30 seconds of a song.</p>\r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit} className=\"sm:flex my-5 sm:my-10 gap-5\">\r\n                <div className=\"w-full\">\r\n                    <input className=\"block w-full p-3 rounded-t-2xl focus:outline-none text-center\" name=\"song\"\r\n                        placeholder=\"Type the name of a track (e.g. Beyonce - Baby Boy)\" />\r\n                    <button className=\"block w-full bg-gray-400 p-3 rounded-b-2xl focus:outline-none\" type=\"submit\">\r\n                        Search track &amp; Calculate tempo\r\n                    </button>\r\n                </div>\r\n                {track && <div className=\"flex my-2 sm:m-0 sm:w-2/12 justify-center items-center\">\r\n                    <button onClick={() => handlePlay()}\r\n                        className={track ? \"block\" : \"hidden\", \"flex-1 h-full bg-gray-600 p-2 rounded-2xl focus:outline-none\"}>\r\n                        {isPlaying ? 'Pause track' : 'Play track'}\r\n                    </button>\r\n                </div>}\r\n            </form>\r\n\r\n            <div>\r\n                <div className=\"text-center text-gray-900 font-semibold\">\r\n                    {result.track && <HandleResult />}\r\n                </div>\r\n                {track && <svg className=\"w-full bg-gray-500 h-16 my-4\" id=\"svg\"></svg>}\r\n                <audio ref={audioRef} src={track}></audio>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}